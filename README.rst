armstrong.apps.couchdb
======================
A set of generic views for embedding `CouchDB`_ data into a view.

.. warning:: Until this is removed, the code mentioned here is not functional.
             This README is for README-driven-development

Introduction
------------
CouchDB can server HTML (or any other data) directly to the client.  This is
great for a green field project, but not for an existing one.  This application
provides an easy way to wrap data generated by CouchDB in a Django view.

Here's an example of how to use this inside your ``urls.py``::

    from django.conf.urls.defaults import patterns, url
    urlpatterns = patterns("",
        url(r"^path/(?P<name>.*)$", "armstrong.apps.couchdb.views.show", {
            "couch_url": "local_db",
            "design_doc": "awesome",
        }),
    )

This renders the ``response`` in the ``armstrong/apps/couchdb/show.html`` template
using the response from the localhost CouchDB using the ``local_db`` database and
the ``_design/awesome`` design document.

For example, sending the following request to the browser::

    http://example.com/path/my-show

Translates to this CouchDB request::

    http://127.0.0.1:5984/local_db/_design/awesome/_shows/my-show

Views
-----
The views provide a simple mechanism for grabbing data from CouchDB and putting
it into a template.  There are four arguments:

``name``
    This is the name of the view, list, or show that is to be passed to
    CouchDB.  This can not be empty.
``couch_url``
    This defines the location your Couch database.  It takes the last portion
    of the path and uses that as the database name, treating the other portion
    as the URL of the database to connect to.  This is required, but can be
    specified the ``COUCH_DEFAULT_URL`` setting value (see below).
``design_doc``
    The name of the design document to be used.  The ``_design/`` prefix is
    added to this if there is no ``/`` inside the name.  Like ``couch_url``,
    this is required but can be provided via a setting.  It looks to
    ``COUCH_DEFAULT_DESIGN_DOC`` for its default value.
``template_name``
    This is the name of the template to load.  This defaults to
    ``armstrong/apps/couchdb/<view name>.html`` if not explicitly provided.
    Each template is given a ``RequestContext`` for the given request.  It
    contains a ``response`` (the raw dict-like object returned from `httplib2`_
    and ``body`` (the actual response from the server) values.  If the ``body``
    is JSON, it is decoded using ``django.utils.simplejson``.  Otherwise the
    value is a string.


There are three views available:

* ``list``
* ``show``
* ``view``

Each view translates directly into a request to a request against the CouchDB
server.  It follows the same formula for all views.

::

    <couch_url>/_design/<design_doc>/_<view>/<name>

So a request to ``show`` with the ``couch_url`` of ``"this"``, ``design_doc``
value of ``"awesome"`` and a ``name`` of ``"data-from-couch"`` would generate
the following URL::

    http://127.0.0.1:5984/this/_design/awesome/_show/data-from-couch


Available Configuration
-----------------------

You can avoid having to repeatedly define ``couch_url`` and ``design_doc``, you
can add those values to your settings module.

``COUCH_DEFAULT_URL``
    This specifies a specific URL for your Couch database.  This is overridden
    by an explicit ``couch_url`` passed into the view.
``COUCH_DEFAULT_DESIGN_DOC``
    This refers to the design document to use.  This assumes that it should be
    prefixed with ``_design/``.


Contributing
------------
Contributions are welcomed and encouraged.  Please follow these instructions
for making a contribution:

* Fork this repository
* Create a topic branch.  Be descriptive with its name.
* Make some great addition, fix a bug, or clean it up
* Submit a Pull Request

You can also report bugs via `Issue Tracker`_.

.. _Issue Tracker: https://github.com/texastribune/armstrong.apps.couchdb/issues
.. _CouchDB: http://couchdb.apache.org/
